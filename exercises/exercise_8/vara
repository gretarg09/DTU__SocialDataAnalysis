<!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="utf-8">
            <title>D3 Test</title>
            <script type="text/javascript" src="/d3/d3.js"></script>
            <link rel="stylesheet" href="/style/myStyle.css">
        </head>
        <body>

        	<div id="area2"></div>

            <script type="text/javascript">

            	//Width and height
				var w = 800;
				var h = 600;
				var k = 2;
				var colors=["yellow","blue","red","pink","black"]


				var projection = d3.geo.mercator()
				    .center([-122.433701, 37.767683])
				    .scale(150000)
				    .translate([w / 2, h / 2]);

				//Define path generator
				var path = d3.geo.path()
					.projection(projection);

				//Define quantize scale to sort data values into buckets of color
				var color = d3.scale.quantize()
					.range(["rgb(237,248,233)","rgb(186,228,179)","rgb(116,196,118)","rgb(49,163,84)","rgb(0,109,44)"]);

				//Create SVG element
				var svg = d3.select("body")
					.append("svg")
					.attr("width", w)
					.attr("height", h);

				//Load in GeoJSON data
				d3.json("https://raw.githubusercontent.com/suneman/socialdataanalysis2017/master/files/sfpddistricts.geojson", function(json){
				//d3.json("us-states.json", function(json) {					
					//Bind data and create one path per GeoJSON feature
					svg.selectAll("path")
					   .data(json.features)
					   .enter()
					   .append("path")
					   .attr("d", path)
					   .style("fill", "steelblue");

					d3.json("kmeans_data.json", function(error,json) {
	            		if (error) {  //If error is not null, something went wrong.
	             			console.log(error);  //Log the error.
	            		} 
	            		else {      //If no error, the file loaded correctly. Yay!
	              			//console.log(json);  //Log the data.
	              			data_2 = json;
	              			console.log(data_2);

	              			var classes = getClasses(data_2.knn2);
							console.log(classes);

							classes.forEach( function(knn_class) { 

								var locations;
								var color;
								if(knn_class == "class0"){
									console.log("loggin 0");
									locations = data_2.knn2.class.locations;
									color = "yellow" 
								}
								if(knn_class == "class1"){
									console.log("loggin 1");
									console.log(data_2.knn2.class1.locations);
									locations = data_2.knn2.class1.locations;
									color = "pink"
								}
								if(knn_class == "class2"){
									console.log("loggin 2");
									data_2.knn2.class3.locations;
								}
								if(knn_class == "class3"){
									console.log("loggin 3");
									data_2.knn2.class4.locations;
								}
								if(knn_class == "class4"){
									console.log("loggin 4");
									data_2.knn2.class5.locations;
								}
								if(knn_class == "class5"){
									console.log("loggin 5");
									data_2.knn2.class6.locations;
								}

								svg.selectAll("circle")
								   .data(locations)
								   .enter()
								   .append("circle")
								   .attr("cx", function(d) {
									   return projection([d.lon, d.lat])[0];
								   })
								   .attr("cy", function(d) {
									   return projection([d.lon, d.lat])[1];
								   })
								   .attr("r", 3)
								   .style("fill", color)
								   .style("opacity", 0.75);
							});
	          			}	
	          		});

	          			          							//Load in cities data
					d3.csv("us-cities.csv", function(data) {
						
						console.log(data);
						console.log(data[0])
						
					});


				});

				function getClasses(dictionary) {
   					var keys = [];
					for (var key in dictionary) {
					  if (dictionary.hasOwnProperty(key)) {
					    keys.push(key);
					  }
					}          
					return keys;
				}
				
            </script>
        </body>
</html>